server:
  port: 8080

spring:
  application:
    name: sharding-jdbc-demo
  profiles:
    active: dev

  # 数据源配置
  datasource:
    druid:
      # 初始连接数
      initial-size: 5
      # 最小连接池数量
      min-idle: 10
      # 最大连接池数量
      max-active: 20

  # ShardingSphere配置
  shardingsphere:
    datasource:
      # 数据源列表
      names: ds0,ds1
      
      # 第一个数据源
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/sharding_db0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: root
        
      # 第二个数据源
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/sharding_db1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: root
    
    # 分片规则配置
    rules:
      sharding:
        # 分库策略
        default-database-strategy:
          standard:
            sharding-column: user_id
            sharding-algorithm-name: database-inline
            
        # 分表策略
        default-table-strategy:
          standard:
            sharding-column: id
            sharding-algorithm-name: table-inline
            
        # 表分片规则
        tables:
          # 用户表分片规则
          t_user:
            actual-data-nodes: ds$->{0..1}.t_user_$->{0..1}
            table-strategy:
              standard:
                sharding-column: id
                sharding-algorithm-name: user-table-inline
                
          # 订单表分片规则
          t_order:
            actual-data-nodes: ds$->{0..1}.t_order_$->{0..1}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: order-database-inline
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: order-table-inline
                
          # 订单项表分片规则
          t_order_item:
            actual-data-nodes: ds$->{0..1}.t_order_item_$->{0..1}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: order-database-inline
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: order-table-inline
                
          # 用户日志表分片规则（按月分表）
          t_user_log:
            actual-data-nodes: ds$->{0..1}.t_user_log_$->{202401..202412}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: log-database-inline
            table-strategy:
              standard:
                sharding-column: operation_time
                sharding-algorithm-name: log-table-by-month
                
          # 交易记录表分片规则（按月分表）
          t_transaction:
            actual-data-nodes: ds$->{0..1}.t_transaction_$->{202401..202412}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: transaction-database-inline
            table-strategy:
              standard:
                sharding-column: transaction_time
                sharding-algorithm-name: transaction-table-by-month
        
        # 分片算法配置
        sharding-algorithms:
          # 数据库分片算法
          database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}
              
          order-database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}
              
          log-database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}
              
          transaction-database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}
              
          # 表分片算法
          table-inline:
            type: INLINE
            props:
              algorithm-expression: t_$->{id % 2}
              
          user-table-inline:
            type: INLINE
            props:
              algorithm-expression: t_user_$->{id % 2}
              
          order-table-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{order_id % 2}
              
          # 按月分表算法 - 用户日志表
          log-table-by-month:
            type: INLINE
            props:
              algorithm-expression: t_user_log_$->{operation_time.format('yyyyMM')}
              
          # 按月分表算法 - 交易记录表
          transaction-table-by-month:
            type: INLINE
            props:
              algorithm-expression: t_transaction_$->{transaction_time.format('yyyyMM')}
        
        # 绑定表关系 - 订单表和订单项表按相同规则分片
        binding-tables:
          - t_order,t_order_item
          
        # 广播表 - 所有库都保存相同数据的表
        broadcast-tables:
          - t_config
          
    # 属性配置
    props:
      # 显示SQL
      sql-show: true
      # 允许范围查询
      sql-simple: false

# MyBatis Plus 配置
mybatis-plus:
  configuration:
    # 开启驼峰命名转换
    map-underscore-to-camel-case: true
    # 日志输出
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      # 主键生成策略
      id-type: ASSIGN_ID
      # 逻辑删除字段
      logic-delete-field: deleted
      # 逻辑删除值
      logic-delete-value: 1
      # 逻辑未删除值
      logic-not-delete-value: 0
  mapper-locations: classpath*:mapper/*.xml
  type-aliases-package: com.example.shardingjdbc.entity

# 日志配置
logging:
  level:
    com.example.shardingjdbc.mapper: debug
    org.apache.shardingsphere: info
    root: info
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n'